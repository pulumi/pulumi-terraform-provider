// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Random
{
    [RandomResourceType("random:index/integer:Integer")]
    public partial class Integer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
        /// more information.
        /// </summary>
        [Output("keepers")]
        public Output<ImmutableDictionary<string, string>?> Keepers { get; private set; } = null!;

        /// <summary>
        /// The maximum inclusive value of the range.
        /// </summary>
        [Output("max")]
        public Output<double> Max { get; private set; } = null!;

        /// <summary>
        /// The minimum inclusive value of the range.
        /// </summary>
        [Output("min")]
        public Output<double> Min { get; private set; } = null!;

        /// <summary>
        /// The random integer result.
        /// </summary>
        [Output("result")]
        public Output<double> Result { get; private set; } = null!;

        /// <summary>
        /// A custom seed to always produce the same value.
        /// </summary>
        [Output("seed")]
        public Output<string?> Seed { get; private set; } = null!;


        /// <summary>
        /// Create a Integer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Integer(string name, IntegerArgs args, CustomResourceOptions? options = null)
            : base("random:index/integer:Integer", name, args ?? new IntegerArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Integer(string name, Input<string> id, IntegerState? state = null, CustomResourceOptions? options = null)
            : base("random:index/integer:Integer", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Integer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Integer Get(string name, Input<string> id, IntegerState? state = null, CustomResourceOptions? options = null)
        {
            return new Integer(name, id, state, options);
        }
    }

    public sealed class IntegerArgs : global::Pulumi.ResourceArgs
    {
        [Input("keepers")]
        private InputMap<string>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
        /// more information.
        /// </summary>
        public InputMap<string> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<string>());
            set => _keepers = value;
        }

        /// <summary>
        /// The maximum inclusive value of the range.
        /// </summary>
        [Input("max", required: true)]
        public Input<double> Max { get; set; } = null!;

        /// <summary>
        /// The minimum inclusive value of the range.
        /// </summary>
        [Input("min", required: true)]
        public Input<double> Min { get; set; } = null!;

        /// <summary>
        /// A custom seed to always produce the same value.
        /// </summary>
        [Input("seed")]
        public Input<string>? Seed { get; set; }

        public IntegerArgs()
        {
        }
        public static new IntegerArgs Empty => new IntegerArgs();
    }

    public sealed class IntegerState : global::Pulumi.ResourceArgs
    {
        [Input("keepers")]
        private InputMap<string>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
        /// more information.
        /// </summary>
        public InputMap<string> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<string>());
            set => _keepers = value;
        }

        /// <summary>
        /// The maximum inclusive value of the range.
        /// </summary>
        [Input("max")]
        public Input<double>? Max { get; set; }

        /// <summary>
        /// The minimum inclusive value of the range.
        /// </summary>
        [Input("min")]
        public Input<double>? Min { get; set; }

        /// <summary>
        /// The random integer result.
        /// </summary>
        [Input("result")]
        public Input<double>? Result { get; set; }

        /// <summary>
        /// A custom seed to always produce the same value.
        /// </summary>
        [Input("seed")]
        public Input<string>? Seed { get; set; }

        public IntegerState()
        {
        }
        public static new IntegerState Empty => new IntegerState();
    }
}
