// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Random
{
    [RandomResourceType("random:index/id:Id")]
    public partial class Id : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The generated id presented in base64 without additional transformations.
        /// </summary>
        [Output("b64Std")]
        public Output<string> B64Std { get; private set; } = null!;

        /// <summary>
        /// The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the
        /// characters `_` and `-`.
        /// </summary>
        [Output("b64Url")]
        public Output<string> B64Url { get; private set; } = null!;

        /// <summary>
        /// The number of random bytes to produce. The minimum value is 1, which produces eight bits of randomness.
        /// </summary>
        [Output("byteLength")]
        public Output<double> ByteLength { get; private set; } = null!;

        /// <summary>
        /// The generated id presented in non-padded decimal digits.
        /// </summary>
        [Output("dec")]
        public Output<string> Dec { get; private set; } = null!;

        /// <summary>
        /// The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte
        /// length.
        /// </summary>
        [Output("hex")]
        public Output<string> Hex { get; private set; } = null!;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
        /// more information.
        /// </summary>
        [Output("keepers")]
        public Output<ImmutableDictionary<string, string>?> Keepers { get; private set; } = null!;

        /// <summary>
        /// Arbitrary string to prefix the output value with. This string is supplied as-is, meaning it is not guaranteed to be
        /// URL-safe or base64 encoded.
        /// </summary>
        [Output("prefix")]
        public Output<string?> Prefix { get; private set; } = null!;


        /// <summary>
        /// Create a Id resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Id(string name, IdArgs args, CustomResourceOptions? options = null)
            : base("random:index/id:Id", name, args ?? new IdArgs(), MakeResourceOptions(options, ""), Utilities.PackageParameterization())
        {
        }

        private Id(string name, Input<string> id, IdState? state = null, CustomResourceOptions? options = null)
            : base("random:index/id:Id", name, state, MakeResourceOptions(options, id), Utilities.PackageParameterization())
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Id resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Id Get(string name, Input<string> id, IdState? state = null, CustomResourceOptions? options = null)
        {
            return new Id(name, id, state, options);
        }
    }

    public sealed class IdArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of random bytes to produce. The minimum value is 1, which produces eight bits of randomness.
        /// </summary>
        [Input("byteLength", required: true)]
        public Input<double> ByteLength { get; set; } = null!;

        [Input("keepers")]
        private InputMap<string>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
        /// more information.
        /// </summary>
        public InputMap<string> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<string>());
            set => _keepers = value;
        }

        /// <summary>
        /// Arbitrary string to prefix the output value with. This string is supplied as-is, meaning it is not guaranteed to be
        /// URL-safe or base64 encoded.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        public IdArgs()
        {
        }
        public static new IdArgs Empty => new IdArgs();
    }

    public sealed class IdState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The generated id presented in base64 without additional transformations.
        /// </summary>
        [Input("b64Std")]
        public Input<string>? B64Std { get; set; }

        /// <summary>
        /// The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the
        /// characters `_` and `-`.
        /// </summary>
        [Input("b64Url")]
        public Input<string>? B64Url { get; set; }

        /// <summary>
        /// The number of random bytes to produce. The minimum value is 1, which produces eight bits of randomness.
        /// </summary>
        [Input("byteLength")]
        public Input<double>? ByteLength { get; set; }

        /// <summary>
        /// The generated id presented in non-padded decimal digits.
        /// </summary>
        [Input("dec")]
        public Input<string>? Dec { get; set; }

        /// <summary>
        /// The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte
        /// length.
        /// </summary>
        [Input("hex")]
        public Input<string>? Hex { get; set; }

        [Input("keepers")]
        private InputMap<string>? _keepers;

        /// <summary>
        /// Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
        /// more information.
        /// </summary>
        public InputMap<string> Keepers
        {
            get => _keepers ?? (_keepers = new InputMap<string>());
            set => _keepers = value;
        }

        /// <summary>
        /// Arbitrary string to prefix the output value with. This string is supplied as-is, meaning it is not guaranteed to be
        /// URL-safe or base64 encoded.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        public IdState()
        {
        }
        public static new IdState Empty => new IdState();
    }
}
